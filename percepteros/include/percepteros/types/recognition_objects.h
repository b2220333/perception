/*
 * This file was generated by generate_typesystem.py.
 * Filename:    recognition_objects
 * Name:        recognitiontypes
 * Description: No description given
 * Version:     1.0
 * Vendor:      None
 */
#ifndef __RECOGNITION_OBJECTS_H__
#define __RECOGNITION_OBJECTS_H__

#include <rs/feature_structure_proxy.h>
#include <percepteros/types/type_definitions.h>
#include <rs/types/core_types.h>
#include <rs/types/tf_types.h>

namespace percepteros
{

/*
 * Tool Object
 */
class ToolObject : public rs::Annotation
{
private:
  void initFields()
  {
    name.init(this, "name");
    hue.init(this, "hue");
    value.init(this, "value");
  }
public:
  // The name of the tool
  rs::FeatureStructureEntry<std::string> name;
  // No description given
  rs::FeatureStructureEntry<float> hue;
  // No description given
  rs::FeatureStructureEntry<float> value;

  ToolObject(const ToolObject &other) :
      rs::Annotation(other)
  {
    initFields();
  }

  ToolObject(uima::FeatureStructure fs) :
      rs::Annotation(fs)
  {
    initFields();
  }
};

/*
 * Rack Object
 */
class RackObject : public rs::Annotation
{
private:
  void initFields()
  {
    name.init(this, "name");
    normal.init(this, "normal");
  }
public:
  // The name of the rack
  rs::FeatureStructureEntry<std::string> name;
  // The average normal vector
  rs::ListFeatureStructureEntry<float> normal;

  RackObject(const RackObject &other) :
      rs::Annotation(other)
  {
    initFields();
  }

  RackObject(uima::FeatureStructure fs) :
      rs::Annotation(fs)
  {
    initFields();
  }
};

/*
 * Recognition Object
 */
class RecognitionObject : public rs::Annotation
{
private:
  void initFields()
  {
    name.init(this, "name");
    type.init(this, "type");
    pose.init(this, "pose");
    color.init(this, "color");
    depth.init(this, "depth");
    height.init(this, "height");
    width.init(this, "width");
    markerID.init(this, "markerID");
  }
public:
  // No description given
  rs::FeatureStructureEntry<std::string> name;
  // No description given
  rs::FeatureStructureEntry<int> type;
  // No description given
  rs::ComplexFeatureStructureEntry<rs::StampedPose> pose;
  // Average Hue value for color clusters.
  rs::FeatureStructureEntry<int> color;
  // No description given
  rs::FeatureStructureEntry<float> depth;
  // No description given
  rs::FeatureStructureEntry<float> height;
  // No description given
  rs::FeatureStructureEntry<float> width;
  // No description given
  rs::FeatureStructureEntry<int>markerID;

  RecognitionObject(const RecognitionObject &other) :
      rs::Annotation(other)
  {
    initFields();
  }

  RecognitionObject(uima::FeatureStructure fs) :
      rs::Annotation(fs)
  {
    initFields();
  }
};

}

TYPE_TRAIT(percepteros::ToolObject, PERCEPTEROS_RECOGNITIONTYPES_TOOLOBJECT)
TYPE_TRAIT(percepteros::RackObject, PERCEPTEROS_RECOGNITIONTYPES_RACKOBJECT)
TYPE_TRAIT(percepteros::RecognitionObject, PERCEPTEROS_RECOGNITIONTYPES_RECOGNITIONOBJECT)

#endif /* __RECOGNITION_OBJECTS_H__ */
